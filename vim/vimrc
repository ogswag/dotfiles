"  ██▒   █▓ ██▓ ███▄ ▄███▓ ██▀███   ▄████▄
" ▓██░   █▒▓██▒▓██▒▀█▀ ██▒▓██ ▒ ██▒▒██▀ ▀█
"  ▓██  █▒░▒██▒▓██    ▓██░▓██ ░▄█ ▒▒▓█    ▄
"   ▒██ █░░░██░▒██    ▒██ ▒██▀▀█▄  ▒▓▓▄ ▄██▒
"    ▒▀█░  ░██░▒██▒   ░██▒░██▓ ▒██▒▒ ▓███▀ ░
"    ░ ▐░  ░▓  ░ ▒░   ░  ░░ ▒▓ ░▒▓░░ ░▒ ▒  ░
"    ░ ░░   ▒ ░░  ░   ░  ░  ░▒ ░ ▒░  ░  ▒
"      ░░   ▒ ░░      ░     ░░   ░ ░
"       ░   ░         ░      ░     ░ ░
"      ░                           ░

" ---
let data_dir = has('nvim') ? stdpath('data') . '/site' : '~/.vim'
if empty(glob(data_dir . '/autoload/plug.vim'))
  silent execute '!curl -fLo '.data_dir.'/autoload/plug.vim --create-dirs  https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif
" ---
call plug#begin()

Plug 'https://github.com/tpope/vim-commentary'
Plug 'https://github.com/christoomey/vim-titlecase'
Plug 'https://github.com/sheerun/vim-polyglot'
Plug 'https://github.com/chasinglogic/modus-themes-vim'

call plug#end()

" ---------- GENERAL SETTINGS  ----------
filetype plugin indent on

set ttimeout ttimeoutlen=25

set hidden confirm

set scrolloff=0

set langmenu=en_US.UTF-8
language messages en_US.UTF-8

set nocompatible
set fileformats=unix,mac
set encoding=utf-8
set fileencoding=utf-8
set fileencodings=utf-8
set splitbelow splitright " Sane splitting
set title      " Set title of a window to filename
set noswapfile " Prevent vim from creating .swp files
set nospell spelllang=en_gb,ru_yo

set nowrap breakindent breakindentopt=sbr,list:-1 linebreak nojoinspaces
set list listchars=tab:›\ ,nbsp:␣,trail:·,extends:…,precedes:… showbreak=↪
set fillchars=fold:\ ,vert:│
set sidescroll=1 sidescrolloff=3
set nostartofline
set virtualedit=block " Enable free-range cursor
set display=lastline
set laststatus=2      " Always show status line
set ruler             " Show line and column info in status line
set belloff=all shortmess+=Ic

set colorcolumn=110
set textwidth=110

syntax on
augroup colorscheme_change | au!
    au ColorScheme habamax hi Normal ctermbg=NONE guibg=NONE
    au ColorScheme habamax hi Comment ctermfg=95 guifg=NONE
    au ColorScheme habamax hi SpellBad cterm=underline ctermfg=124 ctermbg=NONE guifg=#af0000 gui=underline guibg=NONE
    au ColorScheme sorbet hi Normal ctermbg=NONE guibg=NONE
    au ColorScheme default hi Normal ctermbg=NONE guibg=NONE
    au ColorScheme default hi LineNr ctermfg=8 guifg=gray
    au ColorScheme default hi CursorLineNr cterm=NONE ctermfg=12
    au ColorScheme default hi Special ctermfg=5
    au ColorScheme default hi PreProc ctermfg=5
augroup END

function! ChangeBackground()
    if system("defaults read -g AppleInterfaceStyle") =~ '^Dark'
        set background=dark   " for the dark version of the theme
        colors habamax
    else
        set background=light  " for the light version of the theme
        colors lunaperche
    endif
endfunction

" initialize the colorscheme for the first run
call ChangeBackground()

" change the color scheme if we receive a SigUSR1
autocmd SigUSR1 * call ChangeBackground()


function! EnableTermGuicolorsIfSupported()
    " Only proceed if Vim supports termguicolors
    if !has('termguicolors')
        return
    endif

    " Check for truecolor support indicators
    if ($COLORTERM ==# 'truecolor' || $COLORTERM ==# '24bit') ||
        \ ($TERM ==# 'xterm-kitty') ||
        \ ($TERM_PROGRAM ==# 'WezTerm') ||
        \ ($TERM_PROGRAM ==# 'vscode') ||
        \ (exists('$VTE_VERSION') && $VTE_VERSION >= 3600)

        " Handle tmux/screen compatibility
        if &term =~# '^screen' || &term =~# '^tmux'
            let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
            let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
        endif

        set termguicolors

        return 1
    endif

    return 0
endfunction

call EnableTermGuicolorsIfSupported()

set showmatch  " highlight matching brace

if has("gui_running")
    set guifont=Input\ Mono:h13
    set go-=r
    set go-=l
    set go-=L
endif

set cursorline " Highlight cursor line
set cursorlineopt=number
set nu rnu     " Turn on the line numbers

set hlsearch incsearch ignorecase smartcase

" Centre search results on screen
nnoremap n nzz
nnoremap N Nzz

nnoremap j gj
nnoremap k gk

nnoremap <silent> <C-q> <End>a;<C-c>j
imap <silent> <C-q> <End>;<Down>

imap <silent> <C-a> <C-o>I
imap <silent> <C-e> <C-o>A

imap <silent> <C-k> <up>
imap <silent> <C-j> <down>
imap <silent> <C-h> <left>
imap <silent> <C-l> <right>

set autoindent shiftwidth=4 softtabstop=-1 expandtab

autocmd BufNewFile,BufRead,BufWinEnter,FileType,OptionSet * set formatoptions-=t formatoptions-=l formatoptions-=c formatoptions-=r formatoptions-=o formatoptions-=q
autocmd BufNewFile,BufRead,BufWinEnter,FileType,OptionSet * setlocal formatoptions-=t formatoptions-=l formatoptions-=c formatoptions-=r formatoptions-=o formatoptions-=q

set smartindent " Enable smart-indent
set autoindent  " Auto-indent new lines
set smarttab    " Enable smart-tabs

set autochdir   " Change working directory to open buffer
set autoread    " Automatically read files modified elsewhere

set backspace=indent,eol,start  " Backspace behaviour

set mouse=a  " Enable mouse in vim

set wildmenu wildoptions=pum,fuzzy pumheight=20
set wildignore=*.o,*.obj,*.bak,*.exe,*.swp,tags,*.out
set completeopt=menu,popup completepopup=highlight:Pmenu

function! CheckUndoDir()
    let l:home = expand('$HOME')
    let l:undo_dir = l:home . '/.vimUndoDir'

    if !isdirectory(l:undo_dir)
        call system('mkdir -p ' . l:undo_dir)
    endif
endfunction

" Call the function to check and clone minpac if necessary
call CheckUndoDir()
set undodir=~/.vimUndoDir

set undolevels=1000 " Number of undo levels
set undofile
set viminfo='200,<500,s32
